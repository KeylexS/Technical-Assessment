USE DATABASE PIPELINE;
USE SCHEMA GLOBAL_TRANSACTIONS;

--Deleting duplicates rows
CREATE TABLE TRANSACTIONS_DISTINCT
AS SELECT DISTINCT * FROM TRANSACTIONS
ORDER BY CLIENT_ID ASC;

DROP TABLE TRANSACTIONS;

ALTER TABLE TRANSACTIONS_DISTINCT RENAME TO TRANSACTIONS;

--Fill Nulls 
CREATE TABLE TRANSACTIONS_NULL
AS SELECT DISTINCT * FROM TRANSACTIONS
ORDER BY CLIENT_ID ASC;

--The corresponding values of client name are concatenated based on the value it has in its last name
UPDATE TRANSACTIONS_NULL
SET CLIENT_NAME = CONCAT('Client_', SUBSTRING(CLIENT_LASTNAME, CHARINDEX('_', CLIENT_LASTNAME) +  1))
WHERE CLIENT_NAME IS NULL;

UPDATE TRANSACTIONS_NULL
SET STORE_NAME = CONCAT('Store_', SUBSTRING(STORE_ID,1))
WHERE STORE_NAME IS NULL;

UPDATE TRANSACTIONS_NULL
SET PRODUCT_NAME = CONCAT('Product_', SUBSTRING(PRODUCT_ID,1))
WHERE PRODUCT_NAME IS NULL;

DROP TABLE TRANSACTIONS;

ALTER TABLE TRANSACTIONS_NULL RENAME TO TRANSACTIONS;

--Creating Dimension Tables

--Creating Client dimension
CREATE TABLE CLIENT (
    CLIENT_ID INT PRIMARY KEY,
    CLIENT_NAME VARCHAR(16777216),
    CLIENT_LASTNAME VARCHAR(16777216),
    EMAIL VARCHAR(16777216)
);

INSERT INTO CLIENT (CLIENT_ID, CLIENT_NAME, CLIENT_LASTNAME, EMAIL)
SELECT DISTINCT CLIENT_ID, CLIENT_NAME, CLIENT_LASTNAME, EMAIL
FROM TRANSACTIONS;

UPDATE TRANSACTIONS T
SET CLIENT_ID = CD.CLIENT_ID
FROM CLIENT CD
WHERE T.CLIENT_NAME = CD.CLIENT_NAME
    AND T.CLIENT_LASTNAME = CD.CLIENT_LASTNAME
    AND T.EMAIL = CD.EMAIL;

--Creating Store table 
CREATE TABLE STORE (
    STORE_ID INT PRIMARY KEY,
    STORE_NAME VARCHAR(16777216),
    LOCATION VARCHAR(16777216)
);

INSERT INTO STORE (STORE_ID, STORE_NAME, LOCATION)
SELECT DISTINCT STORE_ID, STORE_NAME, LOCATION
FROM TRANSACTIONS;

UPDATE TRANSACTIONS T
SET STORE_ID = S.STORE_ID
FROM STORE S
WHERE T.STORE_NAME = S.STORE_NAME
    AND T.LOCATION = S.LOCATION;

--Creating PRODUCT table 
CREATE TABLE PRODUCT (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(16777216),
    CATEGORY VARCHAR(16777216),
    BRAND VARCHAR(16777216)
);

INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, CATEGORY, BRAND)
SELECT DISTINCT PRODUCT_ID, PRODUCT_NAME, CATEGORY, BRAND
FROM TRANSACTIONS;

UPDATE TRANSACTIONS T
SET PRODUCT_ID = P.PRODUCT_ID
FROM PRODUCT P
WHERE T.PRODUCT_NAME = P.PRODUCT_NAME
    AND T.CATEGORY = P.CATEGORY
    AND T.BRAND = P.BRAND;

--Creating Address table
CREATE TABLE ADDRESS (
    ADDRESS_ID INT PRIMARY KEY,
    STREET VARCHAR(16777216),
    CITY VARCHAR(16777216),
    ZIP_CODE INT
);

INSERT INTO ADDRESS (ADDRESS_ID, STREET, CITY, ZIP_CODE)
SELECT DISTINCT ADDRESS_ID, STREET, CITY, ZIP_CODE
FROM TRANSACTIONS;

UPDATE TRANSACTIONS T
SET ADDRESS_ID = A.ADDRESS_ID
FROM ADDRESS A
WHERE T.STREET = A.STREET
    AND T.CITY = A.CITY
    AND T.ZIP_CODE = A.ZIP_CODE;

--Creation of the Sales fact table
CREATE TABLE SALES (
    TRANSACTION_ID INT PRIMARY KEY,
    QUANTITY_OF_ITEMS_SOLD INT,
    UNIT_PRICE DECIMAL(10,  2),
    DISCOUNT DECIMAL(10,  2),
    
    CLIENT_ID INT,
    STORE_ID INT,
    PRODUCT_ID INT,
    ADDRESS_ID INT
)

--link the foreing key to each Dim

--FK of Client
ALTER TABLE SALES
ADD CONSTRAINT fk_client
FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID);
    
--FK of Store
ALTER TABLE SALES
ADD CONSTRAINT fk_store
FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);

--FK of Product
ALTER TABLE SALES
ADD CONSTRAINT fk_product
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID);
    
--FK of Address
ALTER TABLE SALES  
ADD CONSTRAINT fk_address
FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID);

--Load data into Sales
INSERT INTO SALES (TRANSACTION_ID, QUANTITY_OF_ITEMS_SOLD, UNIT_PRICE, DISCOUNT, CLIENT_ID, STORE_ID, PRODUCT_ID, ADDRESS_ID)
SELECT TRANSACTION_ID, QUANTITY_OF_ITEMS_SOLD, UNIT_PRICE, DISCOUNT, CLIENT_ID, STORE_ID, PRODUCT_ID, ADDRESS_ID
FROM TRANSACTIONS;

SELECT *
FROM SALES
ORDER BY STORE_ID ASC;
